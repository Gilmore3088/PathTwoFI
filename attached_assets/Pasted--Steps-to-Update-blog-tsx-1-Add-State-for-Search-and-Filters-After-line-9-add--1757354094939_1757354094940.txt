## Steps to Update blog.tsx:

### 1. **Add State for Search and Filters**
After line 9, add:
```tsx
const [searchTerm, setSearchTerm] = useState("");
const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
```

### 2. **Import Additional Components**
Add to imports:
```tsx
import { useState, useMemo } from "react";
import { Search, Filter } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
```

### 3. **Create Categories List**
After the `getCategoryColor` function, add:
```tsx
const categories = useMemo(() => {
  const cats = new Set(posts.map(post => post.category));
  return Array.from(cats);
}, [posts]);
```

### 4. **Add Filtering Logic**
Right after categories, add:
```tsx
const filteredPosts = useMemo(() => {
  let filtered = posts;
  if (searchTerm) {
    filtered = filtered.filter(post => 
      post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.excerpt.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }
  if (selectedCategory) {
    filtered = filtered.filter(post => post.category === selectedCategory);
  }
  return filtered;
}, [posts, searchTerm, selectedCategory]);
```

### 5. **Add Search/Filter UI**
Between the Hero Section and Blog Posts divs, insert:
```tsx
{/* Search and Filter Bar */}
<div className="sticky top-0 z-30 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 py-4">
  <div className="container mx-auto px-4 max-w-4xl">
    <div className="flex flex-col md:flex-row gap-4">
      <div className="flex-1">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <Input
            type="text"
            placeholder="Search articles..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>
      </div>
      <div className="flex gap-2 items-center flex-wrap">
        <Filter className="text-gray-400 w-5 h-5" />
        <Button
          size="sm"
          variant={!selectedCategory ? "default" : "outline"}
          onClick={() => setSelectedCategory(null)}
        >
          All
        </Button>
        {categories.map(category => (
          <Button
            key={category}
            size="sm"
            variant={selectedCategory === category ? "default" : "outline"}
            onClick={() => setSelectedCategory(category)}
          >
            {category}
          </Button>
        ))}
      </div>
    </div>
  </div>
</div>
```

### 6. **Replace posts.map with filteredPosts.map**
Change line 77:
```tsx
{filteredPosts.map((post) => (
```

### 7. **Update Empty State**
Wrap the posts mapping in a conditional and update the empty state to handle filtered results:
```tsx
{filteredPosts.length > 0 ? (
  <div className="space-y-12">
    {filteredPosts.map((post) => (
      // ... existing article code
    ))}
  </div>
) : (
  <div className="text-center py-16">
    <div className="text-6xl mb-4">üîç</div>
    <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
      {searchTerm || selectedCategory ? "No matching posts" : "No posts yet"}
    </h3>
    <p className="text-gray-600 dark:text-gray-400">
      {searchTerm || selectedCategory 
        ? "Try adjusting your filters or search terms" 
        : "Check back soon for new content!"}
    </p>
  </div>
)}
```

That's it - search and filtering functionality without overwhelming the page.